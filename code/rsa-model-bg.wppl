// define card deck
let cards_in_deck = {1: 3, 2: 2, 3: 2, 4: 2, 5: 1};
let entire_deck = {
  "red-1": 3, "blue-1": 3, "green-1": 3, "white-1": 3, "yellow-1": 3,
  "red-2": 2, "blue-2": 2, "green-2": 2, "white-2": 2, "yellow-2": 2,
  "red-3": 2, "blue-3": 2, "green-3": 2, "white-3": 2, "yellow-3": 2,
  "red-4": 2, "blue-4": 2, "green-4": 2, "white-4": 2, "yellow-4": 2,
  "red-5": 1, "blue-5": 1, "green-5": 1, "white-5": 1, "yellow-5": 1
}
let deck = {"player1": ["red-1", "red-2", "green-5", "yellow-4", "blue-3"],
            "player2": ["green-2", "white-2", "blue-1", "yellow-4", "red-1"],
            "player3": ["white-5", "white-4", "blue-2", "yellow-3", "yellow-1"]}


let knowledge_base = {
  "player1": [],
  "player2": [], //{pos: 4, hint:"red"}],
  "player3": []
}

let positions = _.range(0, deck.player1.length)
// let actions = ["play", "discard", "hint"]
let suits = ["red", "blue", "green", "white", "yellow"]
let all_utterances = suits.concat(positions);
let intentions = ["keep", "discard", "play", "irrelevant"] // for single cards
let all_cards = _.keys(entire_deck);

// @arg card: color+nb, e.g. red-1, blue-3
let LiteralMeaning = function(card, utt){
  return card.includes(utt)
}

globalStore.context_game = {"discarded": ["white-2"], "played": ["blue-1"],
                            "nb_hints": 8};

let contextGlobal = function(){
  let discarded = globalStore.context_game.discarded
  let played = globalStore.context_game.played
  return discarded.concat(played)
}

let contextPlayers = function(observed_cards){
 let globally_visible = contextGlobal();
  _.countBy(globally_visible.concat(observed_cards))
}

let observationsPlayers = function(observers){
  return reduce(function(player, acc){
  let cards = observers.includes(player) ? [] : deck[player]
  acc.concat(cards)
  }, [], Object.keys(deck))
}

let cardStatus = function(card) {
  let color_nb = card.split("-")
  let color = color_nb[0]; let nb = color_nb[1];

  // card hasn't been played already
  let played1 = !globalStore.context_game.played.includes(color + "-"+ nb)
  // either previous nb of that color had been played or
  // nb is 1 and therefore previous nb is 0 (which does not exist)
  let played2 =  globalStore.context_game.played.includes(color + "-" + (nb-1)) ||
      (nb == 1 && suits.includes(color))

  let nb_played = reduce(function(card, acc){
    let val = card == color + "-" + nb ? 1 : 0;
    return acc + val
  }, 0, globalStore.context_game.discarded);
  let isCritical = nb_played == cards_in_deck[nb]-1;

  let isDiscardable = !played1;

  let status = (played1 && played2) ? "playable" :
  (isCritical ? "critical" : (isDiscardable ? "discardable" : "irrelevant"));

  return status
}

let getRelevantCards = function(){
  let data = {playable: [], critical: [], discardable: [], irrelevant: []}
  map(function(card){
    data[cardStatus(card)].push(card)
  }, all_cards);
  return data
}


let sampleIntent = function(card, nb_unseen){
//   print(card + ' ' + nb_unseen)
  let playable = cardStatus(card) == "playable"
  let already_played = globalStore.context_game.played.includes(card)
  let critical = nb_unseen == 1
  let intent = playable ? "play" :
  (critical ? "keep" : (already_played ? "discard" : "irrelevant"));
  return intent
}

// debug, context is which card a player has seen how many examples of
// let observations = observationsPlayers(["player1", "player2"])
// let context = contextPlayers(observations)
// print(context)
// print(_.keys(context).length) // number of visible cards

var publicKnowledge = function(player, pos){
  let knowledge = _.filter(knowledge_base[player], function(obj){
    return obj.pos == pos
  });
  return knowledge
}

// Prior for 1's is a priori higher than for 2-5s because there are more..!
var PriorCards =function(observers, player){
  let observations = observationsPlayers(observers)
  let context = contextPlayers(observations)

  let cards_unseen = []
  map2(function(card, count){
    let color_nb = card.split("-");
    cards_unseen.push([card, cards_in_deck[color_nb[1]] - count])
  }, Object.keys(context), Object.values(context))

  let remaining_deck = Object.assign(entire_deck, Object.fromEntries(cards_unseen))

  let frequencies = Object.values(remaining_deck)
  let N = sum(frequencies)
  let probs = map(function(freq){freq/N}, frequencies)
  let cards = Object.keys(remaining_deck)

  return Infer({model:function(){
    let card = categorical({vs: cards, ps: probs})
    let pos = uniformDraw([0, 1,2,3,4])
    let knowledge = publicKnowledge(player, pos)
    if(knowledge.length == 1) {
      let isKnown = card.includes(knowledge[0].hint);
      condition(isKnown)
    }
    let intent = sampleIntent(card, remaining_deck[card])
    return {pos, card, intent}
  }})
}

let LiteralListener = function(player, addressee, message){
  return Infer({model: function(){
    let state = sample(PriorCards([addressee, player], addressee))
    if(message.pos.includes(state.pos)){
      condition(LiteralMeaning(state.card, message.utt))
    } else {
      condition(!LiteralMeaning(state.card, message.utt))
    }
    return state
  }})
}

let getRelevance = function(utterance, partial_deck){
  let utility = reduce(function(card, acc){
    let status = cardStatus(card)
    let util = card.includes(utterance) ?
        ((status == "playable" || status == "critical") ? 1 : -1) : 0;
    return acc + util
  }, 0, partial_deck)
  return utility
}

// @arg states: list of states that the speaker wants to convey
let speaker = cache(function(player, addressee, partial_deck){
  let cards = deck[addressee]
  let colors = []; let nbs = [];
  map(function(card){
    let col_nb = card.split("-")
    colors.push(col_nb[0]);
    nbs.push(col_nb[1]);
  }, cards);
  let hints = _.uniq(nbs).concat(_.uniq(colors));
//   print('possible hints: ' + hints)

  return(Infer({model:function(){
    // randomly choose a possible hint
    let utt = uniformDraw(hints)
    let pos = []
    mapIndexed(function(idx, card){
      if(card.includes(utt)){
        pos.push(idx)
      }
    }, cards);
//     print('utterance (hint): ' + utt + ' at pos: ' + pos.join("-"))
    let relevance = getRelevance(utt, partial_deck)/partial_deck.length
//     print(utt + ' ' + relevance + ' ' + utility)
    factor(relevance)

    return {utt, pos: pos.join("-")}
  }}))
})
var intentionPrior = Categorical({vs: ["keep", "discard", "play", "irrelevant"],
                                  ps: [5, 1, 5, 0.5]});

var pragmatic_listener = function(player_speaker, addressee, hint){
  let cards = getRelevantCards()
  return Infer({method:'enumerate', model:function(){

    let playable = uniformDraw(cards.playable);
    let critical = uniformDraw(cards.critical);
    let irrelevant = uniformDraw(cards.irrelevant);
//     let irrelevant = cards.irrelevant[0] // just any, no matter which?
    let discardable = uniformDraw(cards.discardable);

    let c_play = flip() ? playable : [];
    let c2 = flip() ? playable.split("-")[0] + "-X" : []; // same color
    let c3 = flip() ? "X-" + playable.split("-")[1] : []; // same nb

    //critical + playable only if hint is for more than 1 card
    let c_crit = (hint.pos.length > 1 || c_play.length == 0) ?
        (flip() ? critical : []) : [];
    let c5 = flip() ? critical.split("-")[0] + "-X" : [];
    let c6 = flip() ? "X-" + critical.split("-")[1] : [];
    let c7 = flip() ? discardable : [];

    let partial_deck = reduce(function(card, acc){
      return acc.concat(card)
    }, [], [c_play, c2, c3, c_crit, c5,c6, c7]);
    // partial_deck cant be empty, in that case simply use irrelevant card
    let add_c8 = partial_deck.length > 0 ? flip() : true
    add_c8 ? partial_deck.push(irrelevant) : null;

    // somehow include public knowledge about addressees cards, here or in speaker?
    // differentiate between possible cards and certain card
//     var knowledge = reduce(function(pos, acc){
//       return acc.concat(publicKnowledge(addressee, pos))
//     }, [], positions);
//     map(function(card){
//       partial_deck.push(card.hint);
//     }, knowledge);

//     let state = {pos, intent} //old
    let sp = speaker(player_speaker, addressee, partial_deck)
    let utt = sample(sp)
    condition(utt.utt == hint.utt && utt.pos == hint.pos.join("-"))

    // either playable or critical, both only if hint at more than 1 card
    // + possibly discardable/irrelevant (max states: 4 for pos>1, 3 for pos=1)
    let states = filter(function(card){
      return !card.includes("X")
    }, partial_deck);

    // TODO: add functionality for more than positions hinted at
    // for pos=1, one of critical or playable must be in states
    let intent = hint.pos.length == 1 ?
        (states.includes(c_play) ? "play" : "critical") : null;
    let compatible_hint = any(function(val){
      return val.includes(hint.utt);
    }, states);

    let card = intent == "play" ? c_play : intent == "critical" ? c_crit : '';
    condition(card.includes(hint.utt))
    let state = {pos: hint.pos[0], card: card, intent: intent}

    return state

//     return partial_deck.join(".")
  }})
}

let plot = function(Distr, addressee, player, hint, var_marginal){
  console.log(player + ' hints card at pos ' + hint.pos[0] + ' is ' +
              hint.utt + ' at ' + addressee);

  var pos = hint.pos.join(",");
  var disp_hint = (hint.utt == "play" || hint.utt == "discard") ? hint.utt : hint.color;
  return marginalize(Distr, function(val){
    return var_marginal === "card" ? val.card :
      var_marginal === "intent" ? val.intent :
      var_marginal === "card-intent" ? {card: val.card, intent: val.intent} :
      var_marginal === "card-pos" ? {card: val.card, pos: val.pos} :
      var_marginal === "pos-intent" ? {pos: val.pos, intent: val.intent} : val
  })
}

let marginalPos = function(Distr, indices){
  Infer({model:function(){
    let val = sample(Distr)
    condition(indices.includes(val.pos))
    return val
  }})
}

// INPUT
let player = "player1"
let addressee = "player2"
let pos = [4]
let hint = {pos: pos, utt: "red"} // hint.pos = [0,1]
// let states = [{pos: 2, card: "blue-1", intent: "play"},
//               {pos: 4, card: "red-1", intent: "play"}]
// let states = [{pos: 1, intent: "keep"}]
// let states = [{pos: 4, intent: "play"}]
let states = ["red-1", "X-1"]

// PRIOR
// let prior = PriorCards(["player2"], "player2")
// console.log('Beliefs of player2 about position ' + pos[0] + ':')
// prior
// map(print, prior.support())
// print(prior.support().length)
// marginalPos(prior, pos)
// print(sample(prior))

// LITERAL LISTENER
// let ll = LiteralListener(player, addressee, {"utt": hint.utt, "pos": hint.pos})
// print(sample(ll))
// plot(ll, addressee, player, hint, "pos-intent")
// marginalPos(ll, pos)


// SPEAKER
// let sp = speaker(player, addressee, states)
// viz.table(sp)


// PRAGMATIC LISTENER
let PL = pragmatic_listener(player, addressee, hint)
// // print(sample(PL))
// print(PL.support().length)
// viz(PL)
plot(PL, addressee, player, hint, "card-intent")
// viz(marginalPos(PL, hint.pos))
